// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internal/grpc/proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shortener_GetShortURL_FullMethodName           = "/store.Shortener/GetShortURL"
	Shortener_GetOriginalURLByShort_FullMethodName = "/store.Shortener/GetOriginalURLByShort"
	Shortener_GetAPIUserURLs_FullMethodName        = "/store.Shortener/GetAPIUserURLs"
	Shortener_GetInternalStats_FullMethodName      = "/store.Shortener/GetInternalStats"
	Shortener_DeleteAPIUserURLs_FullMethodName     = "/store.Shortener/DeleteAPIUserURLs"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	GetShortURL(ctx context.Context, in *GenerateShortURLRequest, opts ...grpc.CallOption) (*GenerateShortURLResponse, error)
	GetOriginalURLByShort(ctx context.Context, in *GetOriginalURLByShortRequest, opts ...grpc.CallOption) (*GetOriginalURLByShortResponse, error)
	GetAPIUserURLs(ctx context.Context, in *GetAPIUserURLsRequest, opts ...grpc.CallOption) (*GetAPIUserURLsResponse, error)
	GetInternalStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInternalStatsResponse, error)
	DeleteAPIUserURLs(ctx context.Context, in *DeleteAPIUserURLsRequest, opts ...grpc.CallOption) (*DeleteAPIUserURLsResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) GetShortURL(ctx context.Context, in *GenerateShortURLRequest, opts ...grpc.CallOption) (*GenerateShortURLResponse, error) {
	out := new(GenerateShortURLResponse)
	err := c.cc.Invoke(ctx, Shortener_GetShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetOriginalURLByShort(ctx context.Context, in *GetOriginalURLByShortRequest, opts ...grpc.CallOption) (*GetOriginalURLByShortResponse, error) {
	out := new(GetOriginalURLByShortResponse)
	err := c.cc.Invoke(ctx, Shortener_GetOriginalURLByShort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetAPIUserURLs(ctx context.Context, in *GetAPIUserURLsRequest, opts ...grpc.CallOption) (*GetAPIUserURLsResponse, error) {
	out := new(GetAPIUserURLsResponse)
	err := c.cc.Invoke(ctx, Shortener_GetAPIUserURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetInternalStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInternalStatsResponse, error) {
	out := new(GetInternalStatsResponse)
	err := c.cc.Invoke(ctx, Shortener_GetInternalStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteAPIUserURLs(ctx context.Context, in *DeleteAPIUserURLsRequest, opts ...grpc.CallOption) (*DeleteAPIUserURLsResponse, error) {
	out := new(DeleteAPIUserURLsResponse)
	err := c.cc.Invoke(ctx, Shortener_DeleteAPIUserURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	GetShortURL(context.Context, *GenerateShortURLRequest) (*GenerateShortURLResponse, error)
	GetOriginalURLByShort(context.Context, *GetOriginalURLByShortRequest) (*GetOriginalURLByShortResponse, error)
	GetAPIUserURLs(context.Context, *GetAPIUserURLsRequest) (*GetAPIUserURLsResponse, error)
	GetInternalStats(context.Context, *emptypb.Empty) (*GetInternalStatsResponse, error)
	DeleteAPIUserURLs(context.Context, *DeleteAPIUserURLsRequest) (*DeleteAPIUserURLsResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) GetShortURL(context.Context, *GenerateShortURLRequest) (*GenerateShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURL not implemented")
}
func (UnimplementedShortenerServer) GetOriginalURLByShort(context.Context, *GetOriginalURLByShortRequest) (*GetOriginalURLByShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalURLByShort not implemented")
}
func (UnimplementedShortenerServer) GetAPIUserURLs(context.Context, *GetAPIUserURLsRequest) (*GetAPIUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIUserURLs not implemented")
}
func (UnimplementedShortenerServer) GetInternalStats(context.Context, *emptypb.Empty) (*GetInternalStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalStats not implemented")
}
func (UnimplementedShortenerServer) DeleteAPIUserURLs(context.Context, *DeleteAPIUserURLsRequest) (*DeleteAPIUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIUserURLs not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_GetShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetShortURL(ctx, req.(*GenerateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetOriginalURLByShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalURLByShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetOriginalURLByShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetOriginalURLByShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetOriginalURLByShort(ctx, req.(*GetOriginalURLByShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetAPIUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetAPIUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetAPIUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetAPIUserURLs(ctx, req.(*GetAPIUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetInternalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetInternalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetInternalStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetInternalStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteAPIUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPIUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteAPIUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_DeleteAPIUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteAPIUserURLs(ctx, req.(*DeleteAPIUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortURL",
			Handler:    _Shortener_GetShortURL_Handler,
		},
		{
			MethodName: "GetOriginalURLByShort",
			Handler:    _Shortener_GetOriginalURLByShort_Handler,
		},
		{
			MethodName: "GetAPIUserURLs",
			Handler:    _Shortener_GetAPIUserURLs_Handler,
		},
		{
			MethodName: "GetInternalStats",
			Handler:    _Shortener_GetInternalStats_Handler,
		},
		{
			MethodName: "DeleteAPIUserURLs",
			Handler:    _Shortener_DeleteAPIUserURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/shortener.proto",
}
